#!/usr/bin/env bash
# Summary: Runs strap to ensure your machine is fully configured
# Usage: strap run

# This script was initially based on Mike McQuaid's strap project, but now has a ton of changes:
# https://github.com/MikeMcQuaid/strap

set -Eeuo pipefail # https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/

STRAP_DEBUG="${STRAP_DEBUG:-}" && [ -n "$STRAP_DEBUG" ] && set -x
SUDO_PID="${SUDO_PID:-}"
command -v 'strap::lib::import' >/dev/null || { echo "strap::lib::import is not available" >&2; exit 1; }
strap::lib::import io || source ../lib/io.sh
strap::lib::import logging || source ../lib/logging.sh
strap::lib::import sudo || source ../lib/sudo.sh
strap::lib::import fs || source ../lib/fs.sh
strap::lib::import os || source ../lib/os.sh
strap::lib::import pkgmgr || source ../lib/pkgmgr.sh
strap::lib::import pkg || source ../lib/pkg.sh

STRAP_SCRIPT="${STRAP_SCRIPT:-}" && [[ -z "$STRAP_SCRIPT" ]] && echo "STRAP_SCRIPT is not set" && exit 1
STRAP_HOME="${STRAP_HOME:-}" && [[ -z "$STRAP_HOME" ]] && echo "STRAP_HOME is not set" && exit 1
STRAP_USER="${STRAP_USER:-}" && [[ -z "$STRAP_USER" ]] && echo "STRAP_USER is not set" && exit 1
STRAP_USER_HOME="${STRAP_USER_HOME:-}" && [[ -z "$STRAP_USER_HOME" ]] && echo "STRAP_USER_HOME is not set" && exit 1
STRAP_CMD_DIR="${STRAP_CMD_DIR:-}" && [[ -z "$STRAP_CMD_DIR" ]] && echo "STRAP_CMD_DIR is not set" && exit 1
STRAP_LIB_DIR="${STRAP_LIB_DIR:-}" && [[ -z "$STRAP_LIB_DIR" ]] && echo "STRAP_LIB_DIR is not set" && exit 1
STRAP_INTERACTIVE="${STRAP_INTERACTIVE:-}" && [[ -z "$STRAP_INTERACTIVE" ]] && echo "STRAP_INTERACTIVE is not set" && exit 1
STRAP_ROOT_ALLOWED="${STRAP_ROOT_ALLOWED:-}" && [[ -z "$STRAP_ROOT_ALLOWED" ]] && STRAP_ROOT_ALLOWED=false # for CI reasons only
STRAP_GITHUB_ENABLED="${STRAP_GITHUB_ENABLED:-}" && [[ -z "$STRAP_GITHUB_ENABLED" ]] && STRAP_GITHUB_ENABLED=true

CLT_PLACEHOLDER="${CLT_PLACEHOLDER:-}"
STRAP_STEP=''
STRAP_SUCCESS=''
STRAP_QUIET_FLAG="-q"
Q="$STRAP_QUIET_FLAG"

STRAP_ISSUES_URL="https://github.com/ultimatedotfiles/strap/issues/new"

array_contains() {
  local -r arr="${1:-}" value="${2:-}"
  for e in "${arr[@]}"; do [[ "$e" = "$value" ]] && return 0; done
  return 1
}

STRAP_RUN_HOOK_PACKAGES=()
# getopts loop logic from https://stackoverflow.com/a/28466267/407170
declare args="${@:-}"
while getopts "p:-:" arg ${args}; do
  case "$arg" in
    - )  LONG_OPTARG="${OPTARG#*=}"
         case $OPTARG in
           with-hook-package=?* )
             if [[ "${#STRAP_RUN_HOOK_PACKAGES[@]}" -eq 0 ]] || \
                ! array_contains "${STRAP_RUN_HOOK_PACKAGES[@]}" "${LONG_OPTARG}" ]]; then # prevent adding the same package more than once
               STRAP_RUN_HOOK_PACKAGES+=("$LONG_OPTARG")
             fi
             ;;
           with-hook-package* )  echo "No arg for --$OPTARG option" >&2; exit 2 ;;
           '' )        break ;; # "--" terminates argument processing
           * )         echo "Illegal option --$OPTARG" >&2; exit 2 ;;
         esac ;;
    \? ) exit 2 ;;  # getopts already reported the illegal option
  esac
done
shift $((OPTIND-1)) # remove parsed options and args from $@ list
#echo "packages: ${STRAP_RUN_HOOK_PACKAGES[@]}"

cleanup() {
  set +e
  rm -f "$CLT_PLACEHOLDER"
  strap::sudo::cleanup
  if [ -z "$STRAP_SUCCESS" ]; then
    if [ -n "$STRAP_STEP" ]; then
      echo "!!! $STRAP_STEP FAILED" >&2
    else
      echo "!!! FAILED" >&2
    fi
    if [ -z "$STRAP_DEBUG" ]; then
      echo "!!! Run '$0 --debug' for debugging output." >&2
      echo "!!! If you're stuck: file an issue with debugging output at:" >&2
      echo "!!!   $STRAP_ISSUES_URL" >&2
    fi
  fi
}
# Trap any exit call:
trap 'cleanup' SIGINT SIGTERM EXIT

echo -e "\n${FONT_BOLD}Bootstrapping your machine. Here we go!${FONT_CLEAR}\n"

println() {
  local file="${1:-}"
  local msg="${2:-}"
  echo "$msg" >> "$file"
}

[ "$STRAP_USER" = "root" ] && [[ "$STRAP_ROOT_ALLOWED" != true ]] && strap::abort "Run 'strap run' as yourself, not root."
if [[ "$STRAP_OS" == 'mac' ]] && ! groups | grep $Q admin; then strap::abort "Add $STRAP_USER to the admin group."; fi

declare -rx STRAP_SHELL=$(basename "$SHELL")
declare -rx STRAP_SHELL_ENV_FILE="${STRAP_USER_HOME}/strapenv"
declare -rx STRAP_SHELL_RC_FILE="${STRAP_USER_HOME}/straprc"

# Initialize sudo access:
strap::sudo::enable

#############################################################
# Shell init files:
#############################################################

strap::bot "Shell Init Files"

clean_legacy_strap_dotfiles() {
  local val=''
  if grep -q ".strap/straprc" ~/.bashrc; then
    val="$(cat ~/.bashrc | awk '/# strap:straprc:begin/,/# strap:straprc:end/{if (!f)print "# strap:straprc:begin\n[ -r \"$HOME/.strap/etc/straprc\" ] && . \"$HOME/.strap/etc/straprc\"\n# strap:straprc:end"; f=1; next}; 1')"
    echo "${val}" > ~/.bashrc
  fi
  if grep -q ".strap/straprc" ~/.zshrc; then
    val="$(cat ~/.zshrc | awk '/# strap:straprc:begin/,/# strap:straprc:end/{if (!f)print "# strap:straprc:begin\n[ -r \"$HOME/.strap/etc/straprc\" ] && . \"$HOME/.strap/etc/straprc\"\n# strap:straprc:end"; f=1; next}; 1')"
    echo "${val}" > ~/.zshrc
  fi
  if grep -q ".strap/strapenv" ~/.bash_profile; then
    val="$(cat ~/.bash_profile | awk '/# strap:strapenv:begin/,/# strap:strapenv:end/{if (!f)print "# strap:strapenv:begin\n[ -r \"$HOME/.strap/etc/strapenv\" ] && . \"$HOME/.strap/etc/strapenv\"\n# strap:strapenv:end"; f=1; next}; 1')"
    echo "${val}" > ~/.bash_profile
  fi
  if grep -q ".strap/strapenv" ~/.zshenv; then
    val="$(cat ~/.zshenv | awk '/# strap:strapenv:begin/,/# strap:strapenv:end/{if (!f)print "# strap:strapenv:begin\n[ -r \"$HOME/.strap/etc/strapenv\" ] && . \"$HOME/.strap/etc/strapenv\"\n# strap:strapenv:end"; f=1; next}; 1')"
    echo "${val}" > ~/.zshenv
  fi
}

ensure_strap_dotfile() {
  local strapname="${1:-}"; strap::assert::has_length "$strapname" '$1 must be a strap dotfile name'
  shift 1
  strap::assert::has_length "$@" 'One or more dotfile names must be specified after the strap dotfile name'
  local strapfile="$STRAP_USER_HOME/etc/$strapname"
  local filename=
  local file=

  rm -rf "${STRAP_USER_HOME}/$strapname" # remove legacy file
  rm -rf "$strapfile" # always start fresh
  cp "$STRAP_HOME/etc/$strapname" "$strapfile"
  chmod 600 "$strapfile"

  IFS=' ' read -a filenames <<< "$@"
  for filename in "${filenames[@]}"; do

    file="$HOME/$filename"
    strap::fs::file::ensure "$file" '600' "~/$filename"

    strap::running "Checking ~/$filename references ~/.strap/etc/$strapname"
    if ! grep -q "$strapname" "$file"; then
      strap::action "Enabling ~/.strap/etc/$strapname in ~/$filename"
      println "$file" ''
      println "$file" "# strap:$strapname:begin"
      println "$file" "[ -r \"\$HOME/.strap/etc/$strapname\" ] && . \"\$HOME/.strap/etc/$strapname\""
      println "$file" "# strap:$strapname:end"
    fi
    strap::ok
  done
}

mkdir -p "${STRAP_USER_HOME}/etc"
mkdir -p "${STRAP_USER_HOME}/etc/straprc.d"
# replace legacy references if they exist:
clean_legacy_strap_dotfiles
ensure_strap_dotfile 'strapenv' '.bash_profile' '.zshenv'
ensure_strap_dotfile 'straprc' '.bashrc' '.zshrc'

strap::running "Checking ~/.bash_profile references ~/.bashrc per bash user guide recommendations"
file="$HOME/.bash_profile"
if ! grep -q ".bashrc" "$file"; then
  println "$file" ''
  println "$file" '# strap:bashrc:begin'
  println "$file" '# source .bashrc from within .bash_profile per bash user guide: '
  println "$file" '# https://www.gnu.org/software/bash/manual/html_node/Bash-Startup-Files.html'
  println "$file" '[ -r "$HOME/.bashrc" ] && . "$HOME/.bashrc"'
  println "$file" '# strap:bashrc:end'
fi
strap::ok

#############################################################
# Package Manager
#############################################################

strap::bot 'Package Manager'

strap::pkgmgr::init

#############################################################
# Ansible
#############################################################

strap::bot 'Ansible'

strap::pkgmgr::pkg::ensure ansible

#############################################################
# Git & GitHub:
#############################################################

strap::bot "Git & GitHub"

# special handling for git on centos/redhat: the git that is available via the default rpm repos is *old*
# and we need git to also have git-credential-libsecret
git_package_name='git'
if [[ "$(strap::pkgmgr::id)" == 'yum' ]]; then
  git_package_name='git2u'
  if command -v git >/dev/null && ! git help -a | grep -q credential-libsecret; then
    # old git install without git-credential-libsecret.  Remove it and replace with git2u
    strap::action 'Removing out-of-date and/or incompatible git package'
    sudo yum -y erase git >/dev/null 2>&1 || true
    strap::ok
  fi
#  git_exe_path="$(git command -v 2>/dev/null || true)"
#  if [[ -n "$git_exe_path" ]]; then # git is installed.  See if it came from git2u, which is our required package
#    if ! rpm -qf "$git_exe_path" | grep git2u >/dev/null 2>&1; then
#      #uninstall incompatible
#    fi
#  fi
fi

strap::pkgmgr::pkg::ensure "$git_package_name"

command -v curl >/dev/null || strap::pkgmgr::pkg::ensure 'curl' # needed to communicate with github api
strap::pkgmgr::pkg::ensure 'jq' # needed for parsing github api JSON responses

file="$HOME/.gitconfig"
strap::fs::file::ensure "$file" 600 "~/.gitconfig"

strap::lib::import git || source ../lib/git.sh
strap::lib::import github || source ../lib/github.sh

strap::git::config::ensure core.autocrlf input
strap::git::config::ensure push.default simple
strap::git::config::ensure branch.autosetupmerge always
strap::git::credential::helper::ensure

github_token='' # empty unless GH is enabled
if [[ "$STRAP_GITHUB_ENABLED" == true ]]; then

  strap::github::user::ensure
  github_username="$(strap::github::user::get)"

  strap::running "Checking GitHub API Token"
  github_token="$(strap::github::token::find "$github_username")"
  if [[ -n "$github_token" ]]; then
    strap::ok
    strap::running "Checking GitHub API Token validity"
    if ! strap::github::api::token::is_valid "$github_token"; then
      strap::action "Deleting invalid GitHub token from local storage."
      strap::github::token::delete
      github_token='' # clear to ensure a new one is created next
    fi
    strap::ok
  fi
  if [[ -z "$github_token" ]]; then
    strap::action "Creating new GitHub API Token"
    strap::github::api::token::create "$github_username"
    github_token="$(strap::github::token::find "$github_username")"
    [[ -z "$github_token" ]] && strap::abort "Unable to obtain newly-created GitHub API token"
    strap::ok
  fi
fi

strap::running "Checking git config user.email"
STRAP_GIT_EMAIL="${STRAP_GIT_EMAIL:-}"
__strap_git_email="$(git config --global user.email || true)"
if [[ -z "$__strap_git_email" ]]; then # not set in git config, fall back to env var:

  __strap_git_email="$STRAP_GIT_EMAIL"

  # If not set yet, try github if possible:
  if [[ -z "$__strap_git_email" && "$STRAP_GITHUB_ENABLED" == "true" ]]; then
    __strap_git_email="$(strap::github::api::user::email "$github_token" || true)"
  fi

  # If not set yet and interactive, prompt user:
  if [[ -z "$__strap_git_email" && "$STRAP_INTERACTIVE" == "true" ]]; then
    strap::readval __strap_git_email "Enter your email address" false true
  fi

  if [[ -n "$__strap_git_email" ]]; then # store if found
    strap::action "Setting git config user.email = $__strap_git_email"
    git config --global user.email "$__strap_git_email"
  fi
fi
strap::ok

strap::running "Checking git config user.name"
STRAP_GIT_NAME="${STRAP_GIT_NAME:-}"
__strap_git_name="$(git config --global user.name || true)"
if [[ -z "$__strap_git_name" ]]; then # not set in config, try env var:

  __strap_git_name="$STRAP_GIT_NAME"

  # If not found yet, try github if possible:
  if [[ -z "$__strap_git_name" && "$STRAP_GITHUB_ENABLED" == "true" ]]; then
    __strap_git_name="$(strap::github::api::user::name "$github_token" || true)"
  fi

  if [[ -z "$__strap_git_name" ]]; then # still not found, inspect the operating system value if any:
    if strap::os::is_mac; then
      __strap_git_name="$(id -F)"
    elif command -v getent >/dev/null; then
      __strap_git_name="$(getent passwd "$STRAP_USER" | cut -d',' -f1 | cut -d':' -f5)"
    fi
  fi

  # still not found, fall back to user prompt if interactive:
  if [[ -z "$__strap_git_name" && "$STRAP_INTERACTIVE" == "true" ]]; then
    strap::readval STRAP_GIT_NAME "Enter your first and last name" false true
  fi

  if [[ -n "$__strap_git_name" ]]; then # store if found
    strap::action "Setting git config user.name = $__strap_git_name"
    git config --global user.name "$__strap_git_name"
  fi
fi
strap::ok


#############################################################
# SSH:
#############################################################

strap::bot "SSH"

strap::pkgmgr::pkg::ensure openssl
# libsecret package names are different depending on centos/redhat and ubuntu/debian:
[[ "$(strap::pkgmgr::id)" == 'yum' ]] && strap::pkgmgr::pkg::ensure libsecret
[[ "$(strap::pkgmgr::id)" == 'aptget' ]] && strap::pkgmgr::pkg::ensure libsecret-tools

strap::lib::import ssh || source ../lib/ssh.sh

dir="$HOME/.ssh"
strap::fs::dir::ensure "$dir" 700 "~/.ssh"
strap::fs::file::ensure "$dir/authorized_keys" 600 "~/.ssh/authorized_keys"
ssh_known_hosts_file="$dir/known_hosts"
strap::fs::file::ensure "$ssh_known_hosts_file" 600 "~/.ssh/known_hosts"
file="$dir/config"
strap::fs::file::ensure "$file" 600 "~/.ssh/config"

if strap::os::is_mac && strap::semver::compare "$STRAP_OS_VERSION" '>=' '10.12.2'; then

  strap::running "Checking 'Host *' entry in ~/.ssh/config"
  file_contents="$(cat "$file")"
  all_hosts_entry="$(echo "$file_contents" | awk '/^Host \*/{p=1}/^ *$/{p=0}p')"
  if [[ -n "$all_hosts_entry" ]]; then
    strap::ok

    strap::running "Checking 'IgnoreUnknown' for 'Host *' entry in ~/.ssh/config"
    if ! echo "$all_hosts_entry" | grep -q 'IgnoreUnknown'; then
      # The 'Host *' directive doesn't have an IgnoreUnknown line - add one:
      strap::action "Adding 'IgnoreUnknown AddKeysToAgent,UseKeychain' for 'Host *' entry in ~/.ssh/config"
      file_contents="$(echo "$file_contents" | awk '1;/Host \*/{print "  IgnoreUnknown AddKeysToAgent,UseKeychain"}')"
    fi
    strap::ok

    strap::running "Checking 'AddKeysToAgent' for 'Host *' entry in ~/.ssh/config"
    if ! echo "$all_hosts_entry" | grep -q 'AddKeysToAgent'; then
      # The 'Host *' directive doesn't have an AddKeysToAgent line - add one:
      strap::action "Adding 'AddKeysToAgent yes' for 'Host *' entry in ~/.ssh/config"
      file_contents="$(echo "$file_contents" | awk '1;/Host \*/{print "  AddKeysToAgent yes"}')"
    fi
    strap::ok

    strap::running "Checking 'UseKeychain' for 'Host *' entry in ~/.ssh/config"
    if ! echo "$all_hosts_entry" | grep -q 'UseKeychain'; then
      # The 'Host *' directive doesn't have a UseKeychain line - add one:
      strap::action "Adding 'UseKeychain yes' for 'Host *' entry in ~/.ssh/config"
      file_contents="$(echo "$file_contents" | awk '1;/Host \*/{print "  UseKeychain yes"}')"
      all_hosts_entry="$(echo "$file_contents" | awk '/^Host \*/{p=1}/^ *$/{p=0}p')"
    fi
    strap::ok

    # persist changes:
    echo "$file_contents" > "$file"

  else # no all hosts entry - add one:
    strap::action "Creating global 'Host *' entry in ~/.ssh/config"
    [[ -z "$file_contents" ]] && echo '' >> "$file"
    echo 'Host *' >> "$file"
    echo '  IgnoreUnknown AddKeysToAgent,UseKeychain' >> "$file"
    echo '  UseKeychain yes' >> "$file"
    echo '  AddKeysToAgent yes' >> "$file"
    strap::ok
  fi
fi
chmod 600 "$file"

ssh_key="$dir/id_rsa"
ssh_pub_key="${ssh_key}.pub"

ssh_key_passphrase=''

strap::running "Checking ~/.ssh/id_rsa keypair"
if [ ! -f "$ssh_key" ]; then

  strap::action "Creating ~/.ssh/id_rsa keypair"

  if [[ "$STRAP_PROFILES" != *"ci"* ]]; then # anything other than CI environments must have an SSH Key passphrase:
    strap::ssh::idrsa::passphrase::delete # remove whatever might have existed
    ssh_key_passphrase="$(strap::ssh::idrsa::passphrase::create)"
    strap::ssh::idrsa::passphrase:save "$ssh_key_passphrase"
  fi

  # TODO: __strap_git_email can be a github noreply address - in this case, we want the private/primary email instead
  ssh_key_comment="Strap auto-generated RSA key"
  [[ -n "$__strap_git_email" ]] && ssh_key_comment="$ssh_key_comment for $__strap_git_email"
  ssh-keygen -t rsa -b 4096 -C "$ssh_key_comment" -P "$ssh_key_passphrase" -f "$ssh_key" -q
fi
strap::ok

# keypair file permissions
strap::fs::file::ensure "$ssh_key" 400 "~/.ssh/id_rsa"
[[ -f "$ssh_pub_key" ]] && strap::fs::file::ensure "$ssh_pub_key" 400 "~/.ssh/id_rsa.pub"

strap::running "Checking ssh-agent"
set +e # disable auto-fail since we need to explicitly allow failure to check for exact failure return value
ssh_agent_env_file="$HOME/.ssh/agent.env"
ssh-add -l &>/dev/null
if [[ "$?" == "2" ]]; then # need to start an agent
  if [[ -r "$ssh_agent_env_file" ]]; then eval "$(<${ssh_agent_env_file})" >/dev/null; fi
  ssh-add -l &>/dev/null
  if [[ "$?" == "2" ]]; then
    strap::action "Starting ssh-agent"
    (umask 066; ssh-agent -s > "${ssh_agent_env_file}"; chmod 400 "${ssh_agent_env_file}")
    eval "$(<${ssh_agent_env_file})" >/dev/null
  fi
fi
set -e # re-enable auto-fail.  See top of this file for why.
strap::ok

strap::running "Checking ssh-agent has ~/.ssh/id_rsa"
if ! ssh-add -l | grep -q "$(ssh-keygen -lf "$ssh_key"  | awk '{print $2}')"; then # key fingerprint not added yet
  ssh_add_option=''
  if strap::os::is_mac; then ssh_add_option='-K'; fi
  if [[ -z "$ssh_key_passphrase" ]]; then
    ssh-add $ssh_add_option $ssh_key >/dev/null 2>&1 || strap::abort "Could not add $ssh_key to ssh-agent"
  else # Apply the passphrase:
    DISPLAY=:0 SSH_ASKPASS="$STRAP_HOME/etc/ssh_ask_pass.sh" ssh-add "$ssh_add_option" "$ssh_key" <<< "$ssh_key_passphrase"
  fi
fi
strap::ok

#############################################################
# GitHub SSH:
#############################################################

strap::bot "GitHub SSH"

github_ssh_known_host_entry='github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='

strap::running "Checking github.com in ~/.ssh/known_hosts"
if ! grep "^github.com" "$ssh_known_hosts_file" >/dev/null 2>&1; then
  strap::action "Adding github.com to ~/.ssh/known_hosts"
  echo "$github_ssh_known_host_entry" >> "$ssh_known_hosts_file"
fi
strap::ok

if [[ "$STRAP_GITHUB_ENABLED" == true ]]; then
  # piping the contents to awk to retain only the first two tokens (the third, if it exists, is the ssh key comment
  # which GitHub does not store in its JSON, so any equality comparison would fail)
  ssh_pub_key_contents="$(cat $ssh_pub_key | awk '{print $1 " " $2}')"
  strap::github::api::user::keys::ensure "$github_token" "$ssh_pub_key_contents"
fi

#############################################################
# Run Hook Packages:
#############################################################
if [[ "${#STRAP_RUN_HOOK_PACKAGES[@]}" -gt 0 ]]; then

  strap::bot "Run Hook Packages"

  # We use yq or python yaml (whichever is available) to convert yaml to json and then use jq to read package metadata
  if strap::os::is_mac; then
    strap::pkgmgr::pkg::ensure yq
  else
    strap::pkgmgr::pkg::ensure pyyaml
  fi

  # ensure packages exist, or download and are valid:
  for package_id in "${STRAP_RUN_HOOK_PACKAGES[@]}"; do
    [[ -d "$package_id" ]] || strap::pkg::ensure "$package_id"
    strap::pkg::yaml::hook::path "$package_id" run >/dev/null # validates the package automatically
  done

  bash_cmd="$(which bash)"
  for package_id in "${STRAP_RUN_HOOK_PACKAGES[@]}"; do
    file="$(strap::pkg::yaml::hook::path "$package_id" run)"
    if ! ${bash_cmd} "$file"; then
      strap::abort "Unable to execute package $package_id hook $file"
    fi
  done

fi


# make config/state a little more secure, just in case:
chmod -R go-rwx "$STRAP_USER_HOME"

STRAP_SUCCESS="1"
printf "\n${FONT_BOLD}${FONT_GREEN}SUCCESS: Your system is now Strap'd!${FONT_CLEAR}\n\n"

exit 0